name: Build and publish
on:
  push:
    branches: [main, beta, '[0-9].x', '[0-9].[0-9].x']
  release:
    types:
      - published

jobs:
  semantic-release:
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    name: Create a semantic release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Cache npm cache
        uses: actions/cache@v4
        env:
          cache-name: cache-npm-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Install semantic-release globally
        run: sudo npm install --prefer-offline --no-audit --global semantic-release@^17.4.4 @semantic-release/exec@^5.0.0 @semantic-release/git@^9.0.0 conventional-changelog-conventionalcommits@^4.6.3
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.BUMP_GIT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.BUMP_GIT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.BUMP_GIT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.BUMP_GIT_EMAIL }}
        run: semantic-release
  sync_main_to_beta:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Sync branch `main` to `beta` (fast-forward enabled)
    runs-on: ubuntu-latest
    needs:
      - semantic-release
    steps:
      - name: Keep `beta` up to date with `main` (fast-forward enabled)
        uses: jojomatik/sync-branch@beta
        with:
          git_committer_name: ${{ secrets.BUMP_GIT_NAME }}
          git_committer_email: ${{ secrets.BUMP_GIT_EMAIL }}
          github_token: ${{ secrets.GH_TOKEN }}
  sync_release_to_vx:
    if: |
      always() &&
      (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped') &&
      (startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'beta'))
    name: Sync new release to `vx`-branch
    runs-on: ubuntu-latest
    needs:
      - semantic-release
    steps:
      - name: Get version
        id: version
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/}
      - name: Get major version
        id: major
        run: version=${{ steps.version.outputs.version }} && echo ::set-output name=major::${version%%.*}
      - name: Keep `vx`-tag up to date with new release
        uses: jojomatik/sync-branch@beta
        with:
          source: ${{ github.ref }}
          target: ${{ format('refs/tags/{0}', steps.major.outputs.major) }}
          strategy: "force"
          github_token: ${{ secrets.GH_TOKEN }}
